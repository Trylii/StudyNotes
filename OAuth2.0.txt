OAuth2.0
四种授权模式：
1.authorization code （授权码模式）
       授权代码授权类型用于获取访问令牌和刷新令牌，并针对机密客户端进行优化。它是一个基于重定向的流程，因此客户端必须能够与资源所有者的用户
代理（通常是Web浏览器）并且能够从授权服务器接收传入请求（通过重定向）。授权码模式是功能最完整、流程最严密的授权模式，它的特点就是通过客
户端的后台服务器，与"服务提供商"的授权服务器进行互动。
流程解析： 
      1).客户端通过用户代理，重定向请求授权服务器，所需参数：客户端标识及重定向URL； 
      2).用户选择是否给予客户端授权； 
      3).授权服务器给予客户端一个认证授权码，并跳转到指定的URI； 
      4).客户端使用该授权码，重定向到授权服务器，获取令牌； 
      5).授权服务器校验该授权码以及重定向的URI后，向客户端发送令牌或者更新令牌。 
      以上均个人解释，简化了RFC6749官方文档说明，大致意思是一样的。注意的一点是，在用户同意授权后，授权服务器并未直接将令牌发送给客户端，
而是先向客户端发送了一个授权码，authorization code，然后再携带该授权码，再一次请求授权服务器，校验无误后，再发送令牌（access token），
这一步是在后台自动完成的，这样也使OAuth授权更加安全。 
      在该授权流程中，我们所需的几个参数，官方文档中要求指定的参数如下： 
      response_type 必选项 表示的是要求指定的授权类型，此处必须设置为：code 
      client_id 必选项 客户端的唯一标识 
      redirect_uri 可选项 重定向的URI 
      scope 可选项 授权的管道 
      state 建议项 表示客户端状态，授权服务器会将该状态原值返回 

2.implicit（简化模式）
       简化模式用于获取访问令牌（但它不支持令牌的刷新），并对运行特定重定向URI的公共客户端进行优化，而这一些列操作通常会使用脚本语言在浏览器
中完成，令牌对访问者是可见的，且客户端也不需要验证。
步骤解析： 
      1).客户端携带客户端标识以及重定向URI到授权服务器； 
      2).用户确认是否要授权给客户端； 
      3).授权服务器得到许可后，跳转到指定的重定向地址，并将令牌也包含在了里面； 
      4).客户端不携带上次获取到的包含令牌的片段，去请求资源服务器； 
      5).资源服务器会向浏览器返回一个脚本； 
      6).浏览器会根据上一步返回的脚本，去提取在C步骤中获取到的令牌； 
      7).浏览器将令牌推送给客户端。 

3.resource owner password credentials（密码模式）
      密码模式适合建立在客户端与资源所有者具有信任关系的情况下，例如它是一个设备的操作系统或者具有很高权限的应用。这种模式用户要向客户端提供自
己的用户名密码，从而达到向服务提供商索取授权。授权服务器在启动此类型时，要特别小心，只有在其他的授权方式不被允许的情况下才可以使用这种授权模式。
流程解析：
      1).客户端要求使用资源所有者的密码； 
      2).资源所有者给予用户名密码后，客户端向授权服务器发起申请令牌的请求； 
      3).授权服务器将令牌发放给客户端。 

4.client credentials（客户端模式）
      客户端模式是4种模式中最简单的一种模式。客户端可以使用客户端凭据请求访问令牌（或者其他支持的认证方式），在这种模式中，客户端占据主导地位，
它不需要用户的同意，可以直接向授权服务器索取令牌，严格来说，该模式并不存在授权的问题，流程如下：
     1).客户端向授权服务器发起请求索要令牌； 
     2).授权服务器将令牌发放给客户端。 