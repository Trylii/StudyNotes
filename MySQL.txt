SUBSTRING_INDEX(column_name,' ',i) 
提取部分字符：提取字段名为column_name的字段的第i个分隔符之前的字符。

创建外键：
CREATE TABLE interests(
int_id NOT NULL AUTO_INCREMENT PRIMARY KEY,
interest VARCHAR(50) NOT NULL,
contact_id INT NOT NULL, #创建外键 设定为 INT 与 NOT NULL
CONSTRAINT my_contacts_contact_id_fk 
  #CONSTRAINT：告知我们主键的来源表(my_contacts) 主键的名称(contact_id)还能说明这是一个外键(fk)
FOREIGN KEY (contact_id) #括号中的列名就代表外键
REFERENCES my_contacts (contact_id) #这部分指定了外键的来源表 括号中的是外键在来源表的名称
);

junction table(连接表)：
在两个多对多的表之间需要一个中间桥梁来储存两张表的主键，从而把关系转化为一对多。这个中间桥梁就是连接表。

范式：
1.第一范式（1NF）：
规则一：数据列只包含具有原子性的值。
规则二：没有重复的数据组。
函数依赖：
一张表中，一列元素会因为其他列的改变而改变，则成此列函数依赖于其他列。
速记符号：T.x -> T.y 可以理解为在关系表T中，y列 函数依赖 于x列，从右往左解读。
传递函数依赖：
指任何非键列依赖于另一个非键列。
2.第二范式（2NF）：
规则一：先符合1NF。
规则二：没有部分函数依赖性。
3.第三范式（3NF）：
规则一：符合2NF。
规则二：没有传递函数依赖。

ALTER TABLE my_contacts
ADD COLUMN interest1 VARCHAR(50),
ADD COLUMN interest2 VARCHAR(50),
ADD COLUMN interest3 VARCHAR(50),
ADD COLUMN interest4 VARCHAR(50);

UPDATE my_contacts
SET interest1 = SUBSTRING_INDEX(interests, ',', 1);
#SUBSTRING_INDEX(要截取的数据, 要查找的分隔符，此处为',', 查找的是第几个分隔符)

UPDATE my_contacts
SET interests = SUBSTR(interests, LENGTH(interest1)+2);
#SUBSTR返回本列内原始字符串的一部分。它接受字符串并切除我们用括号指定的第一部分，然后返回剩下的部分。

关键字AS：
1.CREATE TABLE profession AS #创建只有一列的profession表，并填入SELECT的查询结果。
       SELECT profession FROM my_contacts
       GROUP BY profession
       ORDER BY profession;
   ALTER TABLE profession
   ADD COLUMN id INT NOT NULL AUTO_INCREMENT FIRST,
   ADD PRIMARY KEY (id);
2.CREATE TABLE profession
   (
       id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
       profession varchar(20)
   ) AS #创建profession表时一并创建主键与profession列，并以SELECT的查询结果填满profession列。
     SELECT profession FROM my_contacts
     GROUP BY profession
     ORDER BY profession;
AS：会引用某个查询的结果来安插至另一个表中。
AS能把SELECT的查询结果填入新表中。
如果不指定新表具有带有新名称的两列，AS只会创建一列，且该列的列明及数据类型与SELECT的查询结果相同。

列的别名：
在查询中首次使用原始列名的地方后接AS并设定要采用的别名，告诉软件现在开始以另一个名称引用该列，这样查询可以更容易被理解。
CREATE TABLE profession
(
    id INT(11) NOT NULL AUTO_INCREMNET PRIMARY KEY,
    mc_prof varchar(20)
)   AS 
    SELECT profession AS mc_prof FROM my_contacts #查询里首次提到原始列名的地方后接AS并设定别名后，软件从这里开始用别名引用数据。
    GROUP BY mc_prof
    ORDER BY mc_prof;

SELECT mc.email FROM my_contacts AS mc 
EXISTS
(SELECT * FROM contact_interest AS ci WHERE mc.contact_id = ci.contact_id)
AND 
NOT EXISTS
(SELECT * FROM job_current jc 
WHERE mc.contact_id = jc.contact_id)

约束（check）：
限定了可以插入列的内容，在外面创建表时就要加入约束。NOT NULL, PRIMARY KEY,FOREIGN KEY, UNIQUE都是约束。
还有下面这种约束
CREATE TABLE piggy_bank
(
    id INT AUTO_INCREMENT NOT NULL PRIMARY KEY,
    coin CHAR(1) CHECK (coin IN ('P', 'N', 'D', 'Q')) #这个部分检查硬币值是否以其中之一为单位。
)
如果插入的值无法通过CHECK条件，则出现错误信息。

创建视图（CREATE VIEW）：创建视图时，只需要在查询中加入CREATE VIEW语句。
查看视图：若想查看视图，可以把它想成一张表，我们可以用SELECT选出它的内容：
SELECT * FROM web_designers;
清理视图：当时图使用完毕后，利用DROP VIEW语句清理空间。语法为：DROP VIEW 视图名;

事务（transaction）：
经典ACID检测：
为了帮助你判断SQL步骤是否为一个事务
A.ATOMICITY 原子性
事务里的每一步骤都必须完成，否则只能都不完成。不能只执行部分事务。就是因为只有一部分事务发生。
C.CONSISTENCY 一致性
事务完后后应该维持数据库的一致性。在完成两组金钱事务后，钱的数量应该符合账户余额的情况。
I.ISOLATION 隔离性
表示每次事务都会看到具有一致性的数据库，无论其他事务有什么行动。
D.DURABILITY 持久性
事务完成后，数据库需要正确地储存数据并保护数据免受断电或其他威胁的伤害。
SQL帮助你管理事务
有三种SQL事务工具可以保障账户安全：
START TRANSACTION;  追踪SQL的行为。
COMMIT;  等我们满意后在提交（COMMIT）所有的程序代码造成的改变。
ROLLBACK;  回滚，回到事务开始前的状态。
在进行COMMIT之前数据库都不会发生任何的改变。

用户：
根用户（root）：具有所有操作数据库的能力，可以为其他的用户创建账号。
创建root的方法很简单：
SET PASSWORD FOR 'root@localhost' = PASSWORD('............'); #根用户名就是”root“，”localhost“代表安装与运行SQL软件的机器
     PASSWORD后面的括号里是为根用户选择的密码。
添加新用户：SQL存储新用户的信息在表中。
语法"
CREATE USER 用户名 IDENTIFIED BY '.............'; #后面的.....是为用户设置的密码

判断用户的确切需求：
用户账号已经创建完毕，可以历用GRANT语句给用户账号授予权限。
GRANT SELECT ON 表名 TO 用户； #某个用户被授予可以SELECT权限，这个权限可以作用于ON后面的表名。
GRANT的各种变化：
1.可以用同一个GRANT语句为多为用户设定权限，每个提到名称的用户都会被授予相同的权限。
2.WITH GRANT OPTION让用户能把刚刚获得的权限授予其他用户。
3.指定用户可于某个表中使用的列，而不是允许用户操作整张表。
4.一段语句可对表指定超过一种权限。
5.GRANT ALL把SELECT、UPDATE、INSERT、DELETE指定表内容的权限都授予用户了。
6.使用database_name.* 可把权限范围运用到数据库中的每张表上。

撤销权限（REVOKE）：
假设要把授予某个用户的SELECT权限收回，此时就需要REVOKE语句。
语法：
REVOKE SELECT ON 表名 FROM 用户名;
注意：在授予权限是用的是TO，而在收回权限时使用的是FROM。
撤销授权许可（GRANT OPTION）
也可以只撤销WITH GRANT OPTION，但不出击权限。被收回了授予他人权限的能里，但自身的权限不受影响。
而且在用户被撤销了授权许可之后，他授予过权限的用户的权限也会被撤销。
具有精确度的撤销操作：
有两种方式既可以撤销权限，又可以确保不影响目标以外的用户。
第一种方式，使用CASCADE移除目标用户的权限后，如果目标用户已将权限授予他人，则连同被授予者的权限一起移除。
语法： REVOKE DELETE ON 表名 FROM 用户名 CASCADE;
第二种方式，若是被撤销用户已将权限授予他人，使用第二种方式的话，RESTRICT可以返回错误信息。
语法：REVOKE DELETE ON 表名 FROM 用户名 RESTRICT;
两方的权限都会被保留，root用户则因为权限的修改会影响被授予者而受到错误信息。

角色（role）：
设定角色：CREATE ROLE 角色名;
想要问角色授权时，直接把角色当成用户就好了：
GRANT SELECT, INSERT ON 表名 TO 角色名;
使用角色：
在创建角色之前，GRANT能直接把权限授予负责数据的用户。现在我们只需要把权限的部分换成角色名并指定给用户。
语法：GRANT 角色名 TO 用户名;
卸载角色：
不在需要某个角色时，使用DROP语句删除角色：
语法：DROP ROLE 角色名;
加上WITH ADMIN OPTION的角色：这个选择功能让具有该角色的每名用户都能把角色授予其他人。
语法：GRANT 角色名 TO 用户名 WITH ADMIN OPTION;
撤销角色时采用CASCADE
与CASCADE一起使用时，撤销（REVOKE）角色会造成连锁撤销反应，包括最初被授予角色权限的用户。
语法：REVOKE 角色名 FROM 用户名 CASCADE;
撤销角色时采用RESTRICT
与RESTRICT一起使用时，若是被撤销（REVOKE）角色的目标用户已把权限授予他人，这种方式可以返回错误信息。
语法：REVOKE 角色名 FROM 用户名 RESTRICT;
两方的权限都会被先保留下来，root用户则因为权限修改会影响被授予用户而受到错误信息。
